#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), '..', 'lib')
$: << File.join(File.dirname(__FILE__))

require 'bitfinex'

bfx = Bitfinex.new

orders = []
10.times {
  started = Time.now
  res = bfx.order(0.01337, 1300.0, routing: 'bitfinex')

  #  message key is only present on error
  if res['message']
    puts "Error: #{res['message']}"
    exit
  end

  orderid = res['order_id']
  orders << orderid

  puts "[#{Time.now.strftime("%H:%M:%S")}] Placed order #{orderid} (#{res['original_amount']} @ #{res['price']})"

  # Wait for order to execute/be cancelled before buying more
  while(res['is_live']) do
    res = bfx.status(orderid)

    puts "  executed: #{res['executed_amount']}/remaining: #{res['remaining_amount']}"
    sleep 6 if res['is_live']
  end
  wait_time = 60 - (Time.now - started)

  if wait_time > 0
    puts "pausing #{wait_time} before next order ... "
    sleep wait_time 
  end
}

bfx.summarize_orders(orders)

# Messages:
# initial order response
# res =>  {"id"=>5421907, "symbol"=>"btcusd", "exchange"=>nil, "price"=>"840.0", "avg_execution_price"=>"0.0", "side"=>"buy", "type"=>"limit", "timestamp"=>"1389334322.888538915", "is_live"=>true, "is_cancelled"=>false, "was_forced"=>false, "original_amount"=>"0.01", "remaining_amount"=>"0.01", "executed_amount"=>"0.0", "order_id"=>5421907}

#pending
# res => "id"=>5421963, "symbol"=>"btcusd", "exchange"=>nil, "price"=>"840.0", "avg_execution_price"=>"0.0", "side"=>"buy", "type"=>"limit", "timestamp"=>"1389334540.0", "is_live"=>true, "is_cancelled"=>false, "was_forced"=>false, "original_amount"=>"0.01", "remaining_amount"=>"0.01", "executed_amount"=>"0.0"}

# finished
# res => {"id"=>5421963, "symbol"=>"btcusd", "exchange"=>nil, "price"=>"840.0", "avg_execution_price"=>"814.65", "side"=>"sell", "type"=>"limit", "timestamp"=>"1389334540.0", "is_live"=>false, "is_cancelled"=>false, "was_forced"=>false, "original_amount"=>"0.01", "remaining_amount"=>"0.0", "executed_amount"=>"0.01"}
