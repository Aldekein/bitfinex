#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), '..', 'lib')
$: << File.join(File.dirname(__FILE__))

require 'bitfinex'
require 'docopt'

doc = <<DOCOPT
#{__FILE__}

Usage:
  #{__FILE__} (buy|sell) <amount> [at <price>] [on (bitfinex|bitstamp)] [options]
  #{__FILE__} -h | --help
  #{__FILE__} --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  -i <sec>      Time between sells
  -x <times>    Repeat the order
  -f            Route sales only through Bitfinex
  -s            Route sales only through Bitstamp

DOCOPT

begin
  amount = 1
  price = nil
  action = :buy
  count = 1
  interval = 15
  routing = 'all'

  opts = Docopt::docopt(doc)
  if(opts['buy'])
    action = :buy
  elsif(opts['sell'])
    action = :sell
  else
    raise "specify buy or sell"
  end

  amount = opts["<amount>"].to_f

  price = opts["<price>"].to_f if(opts['at'])

  count = opts['-x'].to_i if (opts['-x'])

  interval = opts['-i'].to_i if opts['-i']

  routing = 'bitfinex' if opts['bitfinex'] || opts['-f']
  routing = 'bitstamp' if opts['bitstamp'] || opts['-s']

rescue Docopt::Exit => e
  puts e.message
  exit
end

puts "[*] timed_tx"
puts "Will:"
puts "  #{action} #{amount} BTC @ $#{"%0.02f" % price} USD #{count} time(s)"
puts "  on #{routing} " if routing != 'all'
puts "  1 order every #{interval} seconds" if count > 1
puts "pausing 10 seconds, hit ctrl-c to abort"
sleep 10


bfx = BitFinex.new

orders = []

count.times {
  started = Time.now
  res = bfx.send(action, amount, price, {routing: routing})

  if res['message']
    puts "Error: #{res['message']}"
    exit
  end

  orderid = res['order_id']
  orders << orderid
  puts "Placed order #{orderid} (#{res['original_amount']}BTC @ #{"%0.02f" % res['price']}), waiting for completion .."

  begin
    sleep(6)
    res = bfx.status(orderid)
    puts "  executed: #{"%0.06f" % res['executed_amount']}/remaining: #{"%0.06f" % res['remaining_amount']}"
  end while(res['is_live']) 
  avg_price = res['avg_execution_price'].to_f
  total = (amount.to_f * avg_price)
  puts "  #{action} #{amount} at average price: #{"%0.02f" % avg_price} = #{"%0.02f" % total}"

  wait_time = (interval - (Time.now - started))
  sleep(wait_time) if wait_time > 0
}

# XXX: summary
total_btc = 0.0
total_price = 0.0
orders.each { |oo|
  res = bfx.status(oo)
  total_btc += res['executed_amount'].to_f
  total_price += res['avg_execution_price'].to_f
}
total_usd = (total_price/orders.length) * total_btc
puts "Total #{"%0.06f" % total_btc} sold for ~$#{total_usd}"

# initial order response
# =>  {"id"=>5421907, "symbol"=>"btcusd", "exchange"=>nil, "price"=>"840.0", "avg_execution_price"=>"0.0", "side"=>"buy", "type"=>"limit", "timestamp"=>"1389334322.888538915", "is_live"=>true, "is_cancelled"=>false, "was_forced"=>false, "original_amount"=>"0.01", "remaining_amount"=>"0.01", "executed_amount"=>"0.0", "order_id"=>5421907}

# status pending
# => "id"=>5421963, "symbol"=>"btcusd", "exchange"=>nil, "price"=>"840.0", "avg_execution_price"=>"0.0", "side"=>"buy", "type"=>"limit", "timestamp"=>"1389334540.0", "is_live"=>true, "is_cancelled"=>false, "was_forced"=>false, "original_amount"=>"0.01", "remaining_amount"=>"0.01", "executed_amount"=>"0.0"}

# status executed
# => {"id"=>5421963, "symbol"=>"btcusd", "exchange"=>nil, "price"=>"840.0", "avg_execution_price"=>"814.65", "side"=>"sell", "type"=>"limit", "timestamp"=>"1389334540.0", "is_live"=>false, "is_cancelled"=>false, "was_forced"=>false, "original_amount"=>"0.01", "remaining_amount"=>"0.0", "executed_amount"=>"0.01"}

